import random

random_N_CLASSES_PER_TASK = 3
random_N_TASKS = 2
SETTING = "task-il"

sequence_label =  [[[5, 8, 3], [2, 4, 6]], [[6, 2, 1], [0, 7, 3]], [[3, 5, 0], [6, 2, 8]], [[8, 2, 1], [2, 1, 7]], [[2, 1, 4], [1, 2, 3]], [[4, 2, 8], [4, 3, 0]], [[4, 0, 2], [7, 4, 0]], [[8, 1, 2], [2, 6, 0]], [[5, 4, 0], [2, 7, 5]], [[6, 0, 4], [7, 0, 8]], [[1, 6, 0], [5, 7, 8]], [[2, 4, 0], [2, 7, 4]], [[0, 6, 1], [0, 5, 8]], [[5, 6, 4], [6, 8, 7]], [[5, 7, 3], [7, 2, 6]], [[1, 7, 2], [8, 3, 6]], [[4, 8, 0], [5, 2, 1]], [[1, 8, 3], [4, 0, 8]], [[6, 4, 3], [8, 4, 3]], [[7, 6, 0], [7, 0, 5]], [[2, 8, 7], [7, 8, 0]], [[2, 4, 5], [8, 5, 3]], [[8, 6, 3], [3, 8, 7]], [[1, 6, 3], [5, 2, 4]], [[8, 3, 4], [4, 8, 7]], [[8, 7, 5], [5, 8, 4]], [[0, 4, 1], [4, 0, 6]], [[0, 3, 6], [0, 3, 4]], [[6, 2, 4], [1, 4, 2]], [[3, 0, 6], [2, 7, 5]], [[5, 0, 1], [7, 0, 3]], [[3, 1, 6], [8, 5, 2]], [[1, 8, 4], [6, 1, 5]], [[6, 3, 7], [1, 2, 7]], [[1, 5, 8], [6, 0, 4]], [[8, 4, 0], [1, 7, 6]], [[3, 2, 4], [5, 4, 2]], [[3, 2, 8], [3, 8, 6]], [[5, 7, 4], [4, 3, 6]], [[5, 0, 4], [3, 4, 6]], [[2, 6, 8], [8, 4, 0]], [[7, 4, 0], [1, 4, 2]], [[0, 1, 8], [4, 0, 1]], [[3, 2, 1], [3, 1, 6]], [[1, 2, 0], [7, 5, 6]], [[5, 1, 8], [3, 7, 5]], [[0, 7, 3], [2, 8, 5]], [[3, 7, 5], [7, 3, 8]], [[8, 6, 4], [4, 6, 0]], [[5, 6, 0], [8, 7, 0]], [[1, 3, 2], [1, 4, 7]], [[4, 0, 1], [0, 6, 8]], [[8, 4, 7], [0, 3, 6]], [[6, 5, 4], [4, 5, 6]], [[5, 0, 7], [4, 7, 2]], [[0, 2, 3], [8, 5, 0]], [[7, 5, 2], [7, 5, 6]], [[0, 5, 8], [2, 3, 8]], [[8, 2, 1], [2, 3, 0]], [[4, 6, 3], [1, 3, 0]], [[2, 1, 8], [1, 0, 3]], [[5, 6, 4], [2, 5, 4]], [[6, 8, 1], [2, 6, 7]], [[5, 1, 6], [1, 2, 5]], [[3, 5, 7], [6, 7, 3]], [[7, 2, 1], [3, 5, 8]], [[8, 6, 7], [6, 4, 2]], [[4, 2, 8], [3, 6, 0]], [[6, 8, 4], [3, 8, 1]], [[8, 5, 6], [7, 2, 0]], [[8, 6, 2], [6, 5, 1]], [[0, 6, 8], [1, 5, 3]], [[1, 7, 8], [2, 3, 6]], [[2, 4, 3], [5, 0, 6]], [[0, 8, 6], [6, 3, 1]], [[0, 1, 7], [6, 8, 4]], [[6, 5, 4], [3, 8, 5]], [[5, 6, 8], [7, 2, 5]], [[3, 8, 5], [2, 6, 5]], [[5, 8, 6], [0, 8, 3]], [[5, 7, 1], [7, 4, 0]], [[0, 2, 7], [7, 0, 5]], [[7, 3, 1], [3, 0, 2]], [[0, 3, 8], [5, 3, 6]], [[7, 2, 8], [4, 3, 0]], [[2, 7, 3], [8, 1, 3]], [[3, 5, 7], [1, 2, 7]], [[3, 1, 0], [4, 1, 3]], [[3, 4, 6], [4, 7, 6]], [[1, 6, 4], [4, 3, 6]], [[6, 4, 0], [4, 8, 6]], [[2, 3, 7], [5, 1, 0]], [[0, 5, 2], [8, 3, 4]], [[8, 6, 7], [8, 1, 2]], [[4, 8, 1], [4, 5, 6]], [[3, 7, 5], [5, 6, 1]], [[0, 4, 5], [8, 2, 4]], [[1, 4, 5], [3, 0, 2]], [[5, 8, 0], [3, 1, 6]], [[5, 1, 8], [2, 7, 6]]]
sequence_sample = [[[1200, 900, 1200], [300, 1200, 900]], [[300, 1200, 1200], [600, 300, 600]], [[300, 300, 600], [1200, 600, 300]], [[300, 1200, 600], [600, 1200, 600]], [[300, 1200, 600], [600, 600, 1200]], [[1200, 300, 900], [900, 600, 300]], [[600, 900, 900], [600, 1200, 1200]], [[900, 300, 1200], [1200, 300, 900]], [[600, 1200, 300], [1200, 600, 300]], [[600, 300, 600], [300, 1200, 900]], [[300, 600, 600], [900, 900, 300]], [[600, 300, 300], [600, 1200, 300]], [[600, 1200, 1200], [900, 900, 900]], [[300, 600, 300], [1200, 600, 300]], [[1200, 300, 1200], [900, 600, 300]], [[1200, 900, 900], [600, 600, 1200]], [[300, 300, 1200], [900, 600, 900]], [[1200, 600, 1200], [300, 900, 1200]], [[900, 300, 1200], [600, 1200, 600]], [[1200, 1200, 300], [600, 1200, 1200]], [[300, 1200, 300], [1200, 900, 600]], [[1200, 600, 1200], [900, 1200, 1200]], [[600, 1200, 300], [900, 600, 900]], [[1200, 600, 900], [600, 1200, 1200]], [[600, 300, 600], [900, 1200, 900]], [[300, 1200, 600], [1200, 300, 600]], [[1200, 900, 900], [1200, 900, 1200]], [[600, 900, 300], [1200, 600, 600]], [[1200, 1200, 900], [900, 900, 1200]], [[900, 300, 600], [1200, 300, 300]], [[900, 1200, 900], [600, 900, 900]], [[900, 1200, 600], [600, 1200, 300]], [[900, 600, 300], [300, 900, 600]], [[300, 1200, 1200], [600, 900, 600]], [[300, 600, 900], [600, 600, 300]], [[600, 1200, 1200], [1200, 1200, 1200]], [[600, 900, 300], [900, 1200, 900]], [[300, 1200, 300], [600, 300, 900]], [[600, 900, 300], [600, 1200, 900]], [[300, 600, 600], [900, 900, 900]], [[900, 900, 600], [600, 900, 1200]], [[1200, 300, 1200], [900, 1200, 600]], [[1200, 600, 900], [900, 300, 300]], [[600, 300, 600], [600, 600, 900]], [[300, 600, 900], [900, 300, 600]], [[600, 300, 300], [600, 600, 300]], [[900, 1200, 900], [1200, 600, 300]], [[1200, 900, 900], [900, 900, 600]], [[300, 1200, 900], [300, 300, 600]], [[900, 900, 900], [600, 900, 1200]], [[300, 600, 600], [600, 900, 1200]], [[300, 1200, 900], [900, 900, 300]], [[900, 300, 300], [600, 600, 1200]], [[1200, 300, 300], [1200, 900, 300]], [[600, 300, 300], [900, 900, 1200]], [[300, 600, 300], [1200, 300, 300]], [[600, 600, 600], [600, 900, 600]], [[600, 600, 300], [900, 1200, 1200]], [[300, 300, 900], [300, 600, 1200]], [[300, 600, 1200], [300, 300, 900]], [[300, 600, 300], [600, 1200, 1200]], [[900, 1200, 600], [300, 600, 600]], [[1200, 900, 300], [300, 1200, 300]], [[300, 300, 600], [600, 300, 1200]], [[300, 600, 300], [1200, 300, 600]], [[300, 900, 900], [900, 1200, 600]], [[300, 300, 1200], [1200, 900, 900]], [[900, 900, 600], [1200, 600, 300]], [[900, 1200, 900], [1200, 600, 300]], [[1200, 900, 1200], [900, 600, 300]], [[1200, 600, 600], [900, 1200, 600]], [[1200, 300, 600], [900, 600, 600]], [[1200, 300, 600], [900, 600, 300]], [[1200, 1200, 600], [600, 300, 300]], [[300, 900, 1200], [300, 1200, 300]], [[300, 300, 300], [900, 900, 600]], [[900, 300, 600], [1200, 300, 300]], [[1200, 1200, 900], [900, 900, 300]], [[300, 900, 600], [300, 600, 1200]], [[600, 300, 300], [1200, 900, 300]], [[300, 300, 1200], [300, 600, 600]], [[300, 1200, 1200], [300, 1200, 600]], [[900, 300, 600], [600, 600, 900]], [[300, 300, 300], [1200, 1200, 1200]], [[1200, 600, 300], [900, 300, 600]], [[600, 300, 300], [600, 300, 600]], [[600, 300, 1200], [1200, 1200, 900]], [[1200, 900, 900], [600, 900, 900]], [[1200, 1200, 600], [900, 600, 1200]], [[900, 300, 300], [900, 900, 900]], [[900, 600, 600], [1200, 600, 300]], [[1200, 600, 600], [1200, 900, 1200]], [[600, 300, 1200], [300, 900, 600]], [[1200, 300, 300], [300, 300, 300]], [[900, 900, 600], [900, 300, 600]], [[1200, 1200, 900], [900, 1200, 600]], [[1200, 1200, 600], [1200, 1200, 1200]], [[600, 1200, 900], [600, 900, 300]], [[600, 300, 600], [1200, 900, 600]], [[900, 1200, 600], [600, 600, 900]]]

# random_label_list = [[1, 3, 5]]

# random_N_SAMPLES_PER_CLASS = [[300, 600, 900]]

# for t in range(random_N_TASKS-1):
#     random_label_list.append(random.sample(range(0, 9), 3))
#     random_sample_list = []
#     for c in range(random_N_CLASSES_PER_TASK):
#         random_sample_list.append(random.choice([300, 600, 900, 1200]))
#     random_N_SAMPLES_PER_CLASS.append(random_sample_list)

random_label_list = []

random_N_SAMPLES_PER_CLASS = []

unique_label_list = []
count_unique_label_list = []

sequence_sample_list = []

for t in range(random_N_TASKS):
    # random_sample = sequence_label[0][t]
    # random_sample = random.sample(range(0, 9), random_N_CLASSES_PER_TASK)
    if t==0:
        random_sample = random.sample(range(0, 9), random_N_CLASSES_PER_TASK)
    else:
        while 1:
            random_sample = random.sample(range(0, 9), random_N_CLASSES_PER_TASK)
            flag = 0
            count = 0
            for label in random_sample:
                if label in unique_label_list:
                    count = count + 1
            if count == 2:
                flag = 1
                break
            
    for label in random_sample:
        if label not in unique_label_list:
            unique_label_list.append(label)
    count_unique_label_list.append(len(unique_label_list))
    
    random_label_list.append(random_sample)

    # random_sample_list = sequence_sample[0][t]
    random_sample_list = []
    for c in range(random_N_CLASSES_PER_TASK):
        # random_sample_list.append(random.choice([300, 600, 900, 1200]))
        random_sample_list.append(random.choice([1200]))
    random_N_SAMPLES_PER_CLASS.append(random_sample_list)
    sequence_sample_list.append(sum(random_sample_list))

if SETTING == "task-il":
    count_unique_label_list = []
    for t in range(random_N_TASKS):
        count_unique_label_list.append((t+1)*random_N_CLASSES_PER_TASK)
        
"""random_label_list = []

random_N_SAMPLES_PER_CLASS = []

unique_label_list = []
count_unique_label_list = []

sequence_sample_list = []

for t in range(1):
    random_sample = random.sample(range(0, 9), random_N_CLASSES_PER_TASK)
    for label in random_sample:
        if label not in unique_label_list:
            unique_label_list.append(label)
    count_unique_label_list.append(len(unique_label_list))
    
    random_label_list.append(random_sample)

    random_sample_list = []
    for c in range(random_N_CLASSES_PER_TASK):
        random_sample_list.append(random.choice([300, 600, 900, 1200]))
        # random_sample_list.append(random.choice([1200]))
    random_N_SAMPLES_PER_CLASS.append(random_sample_list)
    sequence_sample_list.append(sum(random_sample_list))

random_label_list *= 2

# random_N_SAMPLES_PER_CLASS *=2

count_unique_label_list *=2

# sequence_sample_list *=2

for t in range(1):
    # random_sample = random.sample(range(0, 9), random_N_CLASSES_PER_TASK)
    # for label in random_sample:
    #     if label not in unique_label_list:
    #         unique_label_list.append(label)
    # count_unique_label_list.append(len(unique_label_list))
    
    # random_label_list.append(random_sample)

    random_sample_list = []
    for c in range(random_N_CLASSES_PER_TASK):
        random_sample_list.append(random.choice([300, 600, 900, 1200]))
        # random_sample_list.append(random.choice([1200]))
    random_N_SAMPLES_PER_CLASS.append(random_sample_list)
    sequence_sample_list.append(sum(random_sample_list))"""